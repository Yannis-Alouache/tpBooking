Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	
+++ /dev/null	
@@ -1,8 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
-# Editor-based HTTP Client requests
-/httpRequests/
-# Datasource local storage ignored files
-/dataSources/
-/dataSources.local.xml
Index: .idea/dataSources.xml
===================================================================
diff --git a/.idea/dataSources.xml b/.idea/dataSources.xml
deleted file mode 100644
--- a/.idea/dataSources.xml	
+++ /dev/null	
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="DataSourceManagerImpl" format="xml" multifile-model="true">
-    <data-source source="LOCAL" name="db_tp_booking@localhost" uuid="45942cd5-a80b-4aa3-b075-30f7aad24784">
-      <driver-ref>mysql.8</driver-ref>
-      <synchronize>true</synchronize>
-      <jdbc-driver>com.mysql.cj.jdbc.Driver</jdbc-driver>
-      <jdbc-url>jdbc:mysql://localhost:3306/db_tp_booking</jdbc-url>
-      <working-dir>$ProjectFileDir$</working-dir>
-    </data-source>
-  </component>
-</project>
\ No newline at end of file
Index: view/messages/leftNavig.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/view/messages/leftNavig.php b/view/messages/leftNavig.php
new file mode 100644
--- /dev/null	
+++ b/view/messages/leftNavig.php	
@@ -0,0 +1,29 @@
+<?php
+
+include_once "view/Template.php";
+
+class leftNavig extends Template
+{
+    public function render($context): string {
+		$html = '
+		<section class="font-sans bg-dark-900 text-white">
+			<div class="bg-gray-800 p-4"> ';
+
+				if($context instanceof stdClass) {
+					$html .= '<a href="/messages?userID='. $context->idUtilisateur . '" >
+						<span>'.$context->nom.'</span>
+						<span>'.$context->prenom.'</span>
+					</a>';
+				} else {
+					foreach ($context as $index => $contact) {
+						$html .= '<a href="/messages?userID='. $contact->idUtilisateur . '" >
+							<span>'.$contact->nom.'</span>
+							<span>'.$contact->prenom.'</span>
+						</a>';
+					}
+				}
+			$html .= '</div>';
+
+		return $html;
+	}
+}
Index: app/responseParser.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\n/**\r\n * Data access layer.\r\n * Aucune idée si ce que je fais est bien un DAL. Au pire un parseur et adapteur de données.\r\n * Ce n'est pas un DAL\r\n */\r\nclass responseParser\r\n{\r\n\tprivate mixed $result;\r\n\r\n\t/** @var mixed Les données qui vont être retournées */\r\n\tprivate mixed $data;\r\n\r\n\t/** @var mixed Le query SQL */\r\n\tprivate string $sql;\r\n\r\n\tpublic function __construct(mixed $data, string $sql, bool $parseResult = false)\r\n\t{\r\n\t\t$this->registerData($data, $sql);\r\n\r\n\t\tif($parseResult)\r\n\t\t{\r\n\t\t\t$this->parseReponse();\r\n\t\t}\r\n\r\n\t\treturn $this;\r\n\t}\r\n\r\n\tpublic function parseReponse(): void\r\n\t{\r\n\t\t//Si c'est bien un select\r\n\t\t$isSelect = (preg_match('/SELECT/',trim($this->getSql())) !== 0);\r\n\r\n\t\t$data = $this->getData();\r\n\r\n\t\t//Si le résultat est false\r\n\t\tif($data === false)\r\n\t\t{\r\n\t\t\t//Si le query était un select, alors activer une Exception\r\n\t\t\tif($isSelect)\r\n\t\t\t{\r\n\t\t\t\tthrow new DBexception(\"Une erreur est survenue lors de l'opération dans la base de données.\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$this->setResult(false);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if($data === array())\r\n\t\t{\r\n\t\t\t$this->setResult(true);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//Si le type des données reçues est un array\r\n\t\t\tif(gettype($data) === 'array')\r\n\t\t\t{\r\n\t\t\t\t//Si l'array n'a qu'un élément et que ce dernier existe\r\n\t\t\t\tif(sizeof($data) <= 1)\r\n\t\t\t\t{\r\n\t\t\t\t\t//Si ce qui vas être retourné est déjà une stdClass, alors le retourner\r\n\t\t\t\t\tif($data[0] instanceof stdClass)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t$this->setResult($data[0]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//Sinon, en faire un object (stdClass)\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t$this->setResult(\r\n\t\t\t\t\t\t\t$this->makeObject(\r\n\t\t\t\t\t\t\t\t$data[0] ?? array()\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//Si l'array contient plus d'un seul élément\r\n\t\t\t\telse {\r\n\t\t\t\t\t//Si c'est un select\r\n\t\t\t\t\tif($isSelect)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//Ce qui va être retourné\r\n\t\t\t\t\t\t$toRes =\r\n\t\t\t\t\t\t\tarray_map(function ($val) {\r\n\t\t\t\t\t\t\t\treturn (object)json_decode(json_encode($val));\r\n\t\t\t\t\t\t\t},$data);\r\n\r\n\t\t\t\t\t\t//Retour des données\r\n\t\t\t\t\t\t$this->setResult(\r\n\t\t\t\t\t\t\t$toRes\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//Si c'est un insert, delete ou update\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t//Alors on retourne true. Si l'opération a eu une erreur, une PDOException sera relevée\r\n\t\t\t\t\t\t$this->setResult(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//Si c'est un autre type de données (un string sûrement)\r\n\t\t\telse {\r\n\t\t\t\t//Si le string est 'true', 'false' ou que ce dernier est vide\r\n\t\t\t\tif($data === 'true' || $data === 'false')\r\n\t\t\t\t{\r\n\t\t\t\t\t//On retourne si le string est vide ou non, car si l'opération a eu une erreur, une PDOException sera relevée.\r\n\t\t\t\t\t$this->setResult($this->getData() === 'true');\r\n\t\t\t\t}\r\n\t\t\t\t//Sinon, on retourne true\r\n\t\t\t\telse {\r\n\t\t\t\t\t$this->setResult(true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * //array map pour y transformer le tableau associatif retourné de la BDD en objet\r\n\t * $res = array_map(function ($val) {\r\n\t * return (object)json_decode(json_encode($val));\r\n\t * },$resAll);\r\n\t */\r\n\r\n\tprivate function registerData(mixed $data, string $sql): void\r\n\t{\r\n\t\t$this->setData($data);\r\n\t\t$this->setSql($sql);\r\n\t}\r\n\r\n\tprivate function makeObject(array $data): stdClass\r\n\t{\r\n\t\treturn\r\n\t\t\t(object)\r\n\t\t\tjson_decode(json_encode($data));\r\n\t}\r\n\r\n\t// ----------------------- assessors -----------------------\r\n\r\n\tpublic function getResult(): mixed\r\n\t{\r\n\t\treturn $this->result ?? null;\r\n\t}\r\n\r\n\tprivate function setResult(mixed $res): void\r\n\t{\r\n\t\t$this->result = $res;\r\n\t}\r\n\r\n\tprivate function setData(mixed $data): void\r\n\t{\r\n\t\t$this->data = $data;\r\n\t}\r\n\r\n\tpublic function getData(): mixed\r\n\t{\r\n\t\treturn $this->data ?? null;\r\n\t}\r\n\r\n\tprivate function setSql(string $sql): void\r\n\t{\r\n\t\t$this->sql = $sql;\r\n\t}\r\n\r\n\tpublic function getSql(): string|null\r\n\t{\r\n\t\treturn $this->sql ?? null;\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/responseParser.php b/app/responseParser.php
--- a/app/responseParser.php	
+++ b/app/responseParser.php	
@@ -48,7 +48,7 @@
 		}
 		else if($data === array())
 		{
-			$this->setResult(true);
+			$this->setResult(array());
 		}
 		else {
 			//Si le type des données reçues est un array
@@ -79,7 +79,7 @@
 						//Ce qui va être retourné
 						$toRes =
 							array_map(function ($val) {
-								return (object)json_decode(json_encode($val));
+								return $this->makeObject($val);
 							},$data);
 
 						//Retour des données
@@ -110,13 +110,6 @@
 		}
 	}
 
-	/**
-	 * //array map pour y transformer le tableau associatif retourné de la BDD en objet
-	 * $res = array_map(function ($val) {
-	 * return (object)json_decode(json_encode($val));
-	 * },$resAll);
-	 */
-
 	private function registerData(mixed $data, string $sql): void
 	{
 		$this->setData($data);
